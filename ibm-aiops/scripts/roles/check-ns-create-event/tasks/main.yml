
  - block:
 
    - name: DEBUG -                 🟢 API URL
      debug: 
        var: k8s_apiurl


    - name: DEBUG -                 🟢 API KEY
      debug: 
        var: k8s_apikey


    - name: DEBUG -                 🟢 NAMESPACE
      debug: 
        var: namespace


    - name: DEBUG -                 🟢 resource_prefix
      debug: 
        var: resource_prefix



    - name: DEBUG -                 🟢 resource_postfix
      debug: 
        var: resource_postfix




    - name: OCP Login
      shell: |
        oc login --token={{ my_k8s_apikey }} --server={{ my_k8s_apiurl }} --insecure-skip-tls-verify
      ignore_errors: true
      register: EXEC_RESULT
    - name: 🟣  OUTPUT - OCP Login
      debug: 
        var: EXEC_RESULT.stdout_lines
        #verbosity: 1





    - name: Check and create Events
      shell: |
        echo "---------------------------------------------------------------------------------------------------------------------------------------------------"
        echo "---------------------------------------------------------------------------------------------------------------------------------------------------"
        echo " 🚀 Check AIOPS and create Events"
        echo "---------------------------------------------------------------------------------------------------------------------------------------------------"
        echo ""
        echo ""


        echo "   ----------------------------------------------------------------------------------------------------------"
        echo "    🛠️ Initialize"
        echo "   ----------------------------------------------------------------------------------------------------------"
        export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
        export DATALAYER_ROUTE=$(oc get route  -n $AIOPS_NAMESPACE datalayer-api  -o jsonpath='{.status.ingress[0].host}')
        export USER_PASS="$(oc get secret aiops-ir-core-ncodl-api-secret -n $AIOPS_NAMESPACE -o jsonpath='{.data.username}' | base64 --decode):$(oc get secret -n $AIOPS_NAMESPACE aiops-ir-core-ncodl-api-secret -o jsonpath='{.data.password}' | base64 --decode)"

        echo "       ✅ AIOPS_NAMESPACE:    $AIOPS_NAMESPACE"
        echo "       ✅ USER_PASS:          $USER_PASS"
        echo "       ✅ DATALAYER_ROUTE:    $DATALAYER_ROUTE"



        echo ""
        echo "   ----------------------------------------------------------------------------------------------------------"
        echo "    📥 Check {{ namespace }}"
        echo "   ----------------------------------------------------------------------------------------------------------"
        export PODS_NOK=$(oc get pods -n {{ namespace }} --no-headers|grep -v Completed|grep -v Error|grep -v 1/1|grep -v 2/2| awk '{print $1}' | cut -d "-" -f 1 | tr "\r" "\n")
        echo "    PODS_NOK: $PODS_NOK"

        export PODS_NOK_COUNT=$(oc get pods -n {{ namespace }} --no-headers|grep -v Completed|grep -v Error|grep -v 1/1|grep -v 2/2| grep -c "")
        echo "    PODS_NOK_COUNT: $PODS_NOK_COUNT"



        echo ""
        echo "   ----------------------------------------------------------------------------------------------------------"
        echo "    📥 Create Events"
        echo "   ----------------------------------------------------------------------------------------------------------"

        export DATE_FORMAT_EVENTS="+%Y-%m-%dT%H:%M:%S"
        export my_timestamp=$(date $EVENTS_SECONDS_SKEW $DATE_FORMAT_EVENTS)".000Z"
        echo "       ✅ my_timestamp:    $my_timestamp"




        PODS_NOK=( $( echo $PODS_NOK ) )
        for pod in ${PODS_NOK[@]};
        do
            echo "    📥 Create Event for $pod"

            # echo "> [$pod]"
            currEvent="{\"id\": \"1a2a6787-59ad-4acd-bd0d-1111\",\"occurrenceTime\": \"$my_timestamp\",\"summary\": \"$namespace - Pod Not Ready - $pod\",\"severity\": 1,\"type\": {\"eventType\": \"problem\",\"classification\": \"AppWatch $namespace\"},\"expirySeconds\": 6000000,\"links\": [],\"sender\": {\"type\": \"host\",\"name\": \"AppWatch $namespace\",\"accessScope\": \"KUBERNETES.OBSERVER:local\",\"sourceId\": \"k8s\",\"application\": \"$namespace\"},\"resource\": {\"type\": \"app health\",\"sourceId\": \"AppWatch $namespace\",\"service\": \"$namespace\",\"event\": \"not running\",\"projectName\": \"$namespace\",\"application\": \"$namespace\",\"app_name\": \"$namespace\",\"description\": \"AppWatch $namespace\",\"status\": \"running\",\"name\": \"$resource_prefix$pod$resource_postfix\",\"errormessage\": \"Pod $pod is not Ready.\",\"operationState\": \"Pods not running: $PODS_NOK_COUNT\"},\"details\": {}}"
            # echo $currEvent|jq

            export c_string=$(echo "curl \"https://$DATALAYER_ROUTE/irdatalayer.aiops.io/active/v1/events\"  --insecure   -X POST -u \"${USER_PASS}\" -H 'Content-Type: application/json' -H 'x-username:admin' -H 'x-subscription-id:cfd95b7e-3bc7-4006-a4a8-a73a79c71255' -d '${currEvent}'")
            export result=$(eval $c_string)

            myId=$(echo $result|jq ".deduplicationKey")
            echo "       DONE:$myId"
            #echo "       DONE:$result"
        done



        echo ""
        echo ""
        echo "---------------------------------------------------------------------------------------------------------------------------------------------------"
        echo " ✅ Check All Pods Running"
        echo "---------------------------------------------------------------------------------------------------------------------------------------------------"
        echo "---------------------------------------------------------------------------------------------------------------------------------------------------"

      ignore_errors: true
      register: EXEC_RESULT
    - name: 🟣  OUTPUT - Check All Pods Running
      debug: 
        var: EXEC_RESULT.stdout_lines
        #verbosity: 1





