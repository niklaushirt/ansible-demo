
  - block:
 
    - name: DEBUG -                 üü¢ API URL
      debug: 
        var: k8s_apiurl

    - name: DEBUG -                 üü¢ API KEY
      debug: 
        var: k8s_apikey

    - name: DEBUG -                 üü¢ NAMESPACE
      debug: 
        var: resource_namespace

    - name: DEBUG -                 üü¢ resource_prefix
      debug: 
        var: resource_prefix

    - name: DEBUG -                 üü¢ resource_postfix
      debug: 
        var: resource_postfix

    - name: DEBUG -                 üü¢ resource_test_name
      debug: 
        var: resource_test_name





    - name: OCP Login
      shell: |
        oc login --token={{ my_k8s_apikey }} --server={{ my_k8s_apiurl }} --insecure-skip-tls-verify
      ignore_errors: true
      register: EXEC_RESULT
    - name: üü£  OUTPUT - OCP Login
      debug: 
        var: EXEC_RESULT.stdout_lines
        #verbosity: 1







    - name: Check and create Events
      shell: |
        echo "---------------------------------------------------------------------------------------------------------------------------------------------------"
        echo "---------------------------------------------------------------------------------------------------------------------------------------------------"
        echo " üöÄ Check AIOPS and create Events"
        echo "---------------------------------------------------------------------------------------------------------------------------------------------------"
        echo ""
        echo ""


        echo "   ----------------------------------------------------------------------------------------------------------"
        echo "    üõ†Ô∏è Initialize"
        echo "   ----------------------------------------------------------------------------------------------------------"
        export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
        export DATALAYER_ROUTE=$(oc get route  -n $AIOPS_NAMESPACE datalayer-api  -o jsonpath='{.status.ingress[0].host}')
        export CONSOLE_ROUTE=$(oc get route  -n openshift-console console  -o jsonpath='{.status.ingress[0].host}')
        export USER_PASS="$(oc get secret aiops-ir-core-ncodl-api-secret -n $AIOPS_NAMESPACE -o jsonpath='{.data.username}' | base64 --decode):$(oc get secret -n $AIOPS_NAMESPACE aiops-ir-core-ncodl-api-secret -o jsonpath='{.data.password}' | base64 --decode)"

        echo "       ‚úÖ AIOPS_NAMESPACE:    $AIOPS_NAMESPACE"
        echo "       ‚úÖ USER_PASS:          $USER_PASS"
        echo "       ‚úÖ DATALAYER_ROUTE:    $DATALAYER_ROUTE"
        echo "       ‚úÖ CONSOLE_ROUTE:      $CONSOLE_ROUTE"


        export namespace={{ resource_namespace }}

        echo ""
        echo "   ----------------------------------------------------------------------------------------------------------"
        echo "    üì• Create Events"
        echo "   ----------------------------------------------------------------------------------------------------------"

        export DATE_FORMAT_EVENTS="+%Y-%m-%dT%H:%M:%S"
        export my_timestamp=$(date $EVENTS_SECONDS_SKEW $DATE_FORMAT_EVENTS)".000Z"
        echo "       ‚úÖ my_timestamp:    $my_timestamp"


        echo "    üì• Test Create Event for {{ my_k8s_apikey }}"

        echo "   ----------------------------------------------------------------------------------------------------------"
        echo "   ----------------------------------------------------------------------------------------------------------"

        currEvent="{\"id\": \"1a2a6787-59ad-4acd-bd0d-1111\",\"occurrenceTime\": \"$my_timestamp\",\"summary\": \"{{ resource_namespace }} - Pod Not Ready - {{ my_k8s_apikey }}\",\"severity\": {{resource_severity}},\"type\": {\"eventType\": \"problem\",\"classification\": \"AppWatch\"},\"expirySeconds\": 6000000,\"links\": [{\"linkType\": \"webpage\",\"name\": \"Inspect {{ resource_namespace }} - {{ my_k8s_apikey }}\",\"description\": \"Inspect {{ resource_namespace }} - {{ my_k8s_apikey }}\",\"url\": \"https://$CONSOLE_ROUTE/k8s/ns/{{ resource_namespace }}/deployments/{{ my_k8s_apikey }}\"}],\"sender\": {\"type\": \"host\",\"name\": \"AppWatch {{ resource_namespace }}\",\"accessScope\": \"KUBERNETES.OBSERVER:local\",\"sourceId\": \"k8s\",\"application\": \"{{ resource_namespace }}\"},\"resource\": {\"type\": \"app health\",\"sourceId\": \"AppWatch {{ resource_namespace }}\",\"service\": \"{{ resource_namespace }}\",\"event\": \"not running\",\"projectName\": \"{{ resource_namespace }}\",\"application\": \"{{ resource_namespace }}\",\"app_name\": \"{{ resource_namespace }}\",\"description\": \"AppWatch {{ resource_namespace }}\",\"status\": \"running\",\"name\": \"{{ resource_prefix }}{{ my_k8s_apikey }}{{ resource_postfix }}\",\"errormessage\": \"Pod {{ my_k8s_apikey }} is not Ready.\",\"operationState\": \"Pods not running: {{ my_k8s_apikey }}S_NOK_COUNT\"},\"details\": {}}"
        echo "currEvent:"$currEvent

        echo "   ----------------------------------------------------------------------------------------------------------"
        echo "   ----------------------------------------------------------------------------------------------------------"
        export c_string=$(echo "curl \"https://$DATALAYER_ROUTE/irdatalayer.aiops.io/active/v1/events\"  --insecure   -X POST -u \"${USER_PASS}\" -H 'Content-Type: application/json' -H 'x-username:admin' -H 'x-subscription-id:cfd95b7e-3bc7-4006-a4a8-a73a79c71255' -d '${currEvent}'")
        echo $c_string

         echo "   ----------------------------------------------------------------------------------------------------------"
        echo "   ----------------------------------------------------------------------------------------------------------"

        export result=$(eval $c_string)

        myId=$(echo $result|jq ".deduplicationKey")
        echo "       DONE:$myId"
        #echo "       DONE:$result"



        echo ""
        echo ""
        echo "---------------------------------------------------------------------------------------------------------------------------------------------------"
        echo " ‚úÖ Check All Pods Running"
        echo "---------------------------------------------------------------------------------------------------------------------------------------------------"
        echo "---------------------------------------------------------------------------------------------------------------------------------------------------"

      ignore_errors: true
      register: EXEC_RESULT
    - name: üü£  OUTPUT - Check All Pods Running
      debug: 
        var: EXEC_RESULT.stdout_lines
        #verbosity: 1





